// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////////////
// Models
////////////////////////////////////////////////////////////////////////////////

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  firstName String?
  lastName String?
  token String?
  isSuperAdmin Boolean?

  accounts Account[]
  workspaces Member[] @relation("workspaces")
  
  notifications Notification[]
  notificationPreferences NotificationPreferences?

  sentInvitations     Invitation[] @relation("sentInvitations")
  receivedInvitations Invitation[] @relation("receivedInvitations")

  createdWorkspaces Workspace[]
  createdMembers Member[] @relation("createdMembers")

  // Materials relationships
  createdMaterials Material[] @relation("createdMaterials")
  receivedMaterials MaterialStudentShare[] @relation("receivedMaterials")
  sharedMaterials MaterialStudentShare[] @relation("sharedMaterials")

  @@map("users")
}

model NotificationPreferences {
  id                      Int     @id @default(autoincrement())
  userId                  Int     @unique
  emailNotificationsEnabled Boolean @default(true)

  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  provider AccountProvider
  email String
  password String?
  isEmailVerified Boolean?

  user User @relation(fields: [userId], references: [id])
  userId Int

  resetToken      PasswordResetToken?
  emailToken      EmailConfirmationToken?

  @@map("accounts")
}

model PasswordResetToken {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  expiresAt       DateTime      @db.Timestamptz(3)

  token           String        @unique @db.Uuid
  
  account         Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int           @unique
  
  @@map("password_reset_tokens")
}

model EmailConfirmationToken {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  expiresAt       DateTime      @db.Timestamptz(3)
  
  token           String        @unique @db.Uuid
  
  account         Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int           @unique
  
  @@map("email_confirmation_tokens")
}

model Workspace {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  
  createdById Int // ID of the user who created this workspace
  createdBy User @relation(fields: [createdById], references: [id])

  name String
  slug String @unique

  configuration WorkspaceConfig?
  members Member[]
  events Event[]
  invitations Invitation[]
  materials Material[]

  @@map("workspaces")
}

model WorkspaceConfig {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  weekStart WeekStart

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int @unique

  danceTypes DanceType[] @relation("workspaceDanceTypes")

  @@map("workspaceConfig")
}

model Member {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  
  createdById Int // ID of the user who added the member to the workspace
  createdBy User @relation(name: "createdMembers", fields: [createdById], references: [id])


  user User? @relation(name: "workspaces", fields: [userId], references: [id])
  userId Int?

  name String? // Can be empty if the user exists, required if user is null, by default, overrided by user.firstName + user.lastName
  
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  attendances Attendee[]

  roles WorkspaceRole[]

  level Int?
  preferedDanceRole DanceRole? // leave empty if there is no preference?

  invitation Invitation? @relation("invitation") // invited through this invitatino

  @@map("members")
}

model Event {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  //createdById Int 
  //createdBy User 
  // managedById Int
  // managedBy Member

  name String
  description String?
  dateStart DateTime @db.Timestamptz(3)
  dateEnd DateTime? @db.Timestamptz(3)
  location String?
  capacityMin Int?
  capacityMax Int?
  leaderOffset Int? @default(0)
  followerOffset Int? @default(0)
  // @see https://developers.google.com/calendar/api/v3/reference/events#recurrence
  rule String[]

  attendees Attendee[]

  invitations Invitation[]
  materials Material[] @relation("eventMaterials")
  danceTypes DanceType[] @relation("eventDanceTypes")

  organizer Workspace @relation(fields: [organizerId], references: [id])
  organizerId Int

  @@map("events")
}

model Attendee {
  id          Int           @id @default(autoincrement())

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  role DanceRole?
  type AttendanceType @default(WAITING)

  member Member @relation(fields: [memberId], references: [id])
  memberId Int

  event Event @relation(fields: [eventId], references: [id])
  eventId Int

  invitation Invitation? @relation("invitation") // invited through this invitatino

  @@unique([memberId, eventId])
  @@map("attendees")
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  
  user User @relation(fields: [userId], references: [id]) 
  userId Int
  
  type        NotificationType // Using an enum now
  
  read        Boolean          @default(false)

  // Specific relationships
  invitation   Invitation? @relation(fields: [invitationId], references: [id])
  invitationId Int?
  
  // Future relationships could be added here
  // event        Event?      @relation(fields: [eventId], references: [id])
  // eventId      Int?
  // member       Member?     @relation(fields: [memberId], references: [id])
  // memberId     Int?

  @@index([userId])
  @@index([type])
  @@index([read])
}


model Invitation {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(3)

  type InviteType

  email       String?       // Optional - if inviting by email
  firstName        String?       // Optional - for placeholder invitations
  lastName        String?       // Optional - for placeholder invitations

  token       String        @unique @db.Uuid
  expiresAt   DateTime      @db.Timestamptz(3)
  status      InvitationStatus @default(PENDING)
  
  // Relation to workspace being invited to
  workspace   Workspace?     @relation(fields: [workspaceId], references: [id])
  workspaceId Int?
  
  // Who sent the invitation
  inviter     User          @relation("sentInvitations", fields: [inviterId], references: [id])
  inviterId   Int
  
  invitee     User?         @relation("receivedInvitations", fields: [inviteeId], references: [id])
  inviteeId   Int?
  
  memberSeatId Int? @unique // The member the invitee will be linked with when he accepts the invitation
  memberSeat Member? @relation("invitation", fields: [memberSeatId], references: [id])
  
  event   Event?     @relation(fields: [eventId], references: [id])
  eventId Int?

  attendeeSeatId Int? @unique // The attendee the invitee will be linked with when he accepts the invitation
  attendeeSeat Attendee? @relation("invitation", fields: [attendeeSeatId], references: [id])
  
  notifications Notification[] // notifications related to this invitation (received, accepted, declined, ...)
  
  @@map("invitations")
}

model DanceType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  name String @unique
  type DanceTypeEnum
  category DanceCategory?
  description String?

  // Events can reference dance types
  events Event[] @relation("eventDanceTypes")
  
  // Materials of this dance type
  materials Material[] @relation("materialDanceType")
  
  // Workspace that offers this dance type
  workspaceConfigs WorkspaceConfig[] @relation("workspaceDanceTypes")

  @@map("dance_types")
}

model Material {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  name String
  description String?

  videoUrls String[]
  imageUrls String[]

  // Visibility and ownership
  visibility MaterialVisibility @default(PRIVATE)

  // Creator/Owner
  createdBy User @relation("createdMaterials", fields: [createdById], references: [id])
  createdById Int

  // Workspace scope (null if private or public)
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?

  // Hierarchical relationships - self-referencing for composite materials
  parentMaterial Material? @relation("MaterialHierarchy", fields: [parentMaterialId], references: [id])
  parentMaterialId Int?
  childMaterials Material[] @relation("MaterialHierarchy")

  // Events that use this material
  events Event[] @relation("eventMaterials")

  // Dance type relationship
  danceType DanceType? @relation("materialDanceType", fields: [danceTypeId], references: [id])
  danceTypeId Int?

  // Individual student shares (optional feature)
  studentShares MaterialStudentShare[]

  @@map("materials")
}

model MaterialStudentShare {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId Int

  student User @relation("receivedMaterials", fields: [studentId], references: [id])
  studentId Int

  sharedBy User @relation("sharedMaterials", fields: [sharedById], references: [id])
  sharedById Int

  // Tracking
  viewedAt DateTime?
  canDownload Boolean @default(false)
  expiresAt DateTime?

  @@unique([materialId, studentId])
  @@map("material_student_shares")
}


////////////////////////////////////////////////////////////////////////////////
// Enums
////////////////////////////////////////////////////////////////////////////////

enum AccountProvider {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum InviteType {
  WORKSPACE
  EVENT
}

// Inspired by https://developers.google.com/calendar/api/v3/reference/settings
/// Whether the week should start on Sunday (0), Monday (1) or Saturday (6)
enum WeekStart {
  SUNDAY
  MONDAY
  SATURDAY
}

enum AttendanceType {
  VALIDATE
  WAITING
}

enum DanceRole {
  LEADER
  FOLLOWER
}

enum WorkspaceRole {
  OWNER
  TEACHER
  STUDENT
}

enum MemberStatus {
  ACTIVE
  DEACTIVATED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum NotificationType {
  INVITATION_RECEIVED
  WORKSPACE_MEMBER_JOINED
  // Add other types as needed
}

enum DanceCategory {
  LATIN
  BALLROOM
  SWING
  FOLK
  COUNTRY
  CONTEMPORARY
  OTHER
}

enum DanceTypeEnum {
  SALSA
  BACHATA
  KIZOMBA
  MERENGUE
  CHA_CHA
  RUMBA
  SAMBA
  WALTZ
  TANGO
  QUICKSTEP
  VIENNESE_WALTZ
  LINDY_HOP
  EAST_COAST_SWING
  WEST_COAST_SWING
  BALBOA
  CHARLESTON
  ARGENTINE_TANGO
  MILONGA
  VALS
  BLUES
  ZOUK
  LAMBADA
  MAMBO
  CASINO
  RUEDA
  OTHER
}

enum MaterialVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC
}
