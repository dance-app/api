// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////////////
// Models
////////////////////////////////////////////////////////////////////////////////

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  fullName String?
  token String?

  accounts Account[]
  workspaces Member[]
  attendences Attendee[]

  @@map("users")
}

model Account {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  provider AccountProvider
  email String
  password String

  user User @relation(fields: [userId], references: [id])
  userId Int

  @@map("accounts")
}

model Workspace {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  name String

  configuration WorkspaceConfig?
  members Member[]
  events Event[]

  @@map("workspaces")
}

model WorkspaceConfig {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  weekStart WeekStart

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int @unique

  @@map("workspaceConfig")
}

model Member {
  user User @relation(fields: [userId], references: [id])
  userId Int

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  @@id([userId, workspaceId])
}

model Event {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  name String
  description String?
  dateStart DateTime @db.Timestamptz(3)
  dateEnd DateTime? @db.Timestamptz(3)
  location String?
  capacityMin Int?
  capacityMax Int?
  leaderOffset Int? @default(0)
  followerOffset Int? @default(0)
  // @see https://developers.google.com/calendar/api/v3/reference/events#recurrence
  rule String[]

  attendees Attendee[]

  organizer Workspace @relation(fields: [organizerId], references: [id])
  organizerId Int

  @@map("events")
}

model Attendee {
  role DanceRole
  type AttendenceType

  user User @relation(fields: [userId], references: [id])
  userId Int

  event Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@id([userId, eventId])
}

////////////////////////////////////////////////////////////////////////////////
// Enums
////////////////////////////////////////////////////////////////////////////////

enum AccountProvider {
  LOCAL
  GOOGLE
  FACEBOOK
}

// Inspired by https://developers.google.com/calendar/api/v3/reference/settings
/// Whether the week should start on Sunday (0), Monday (1) or Saturday (6)
enum WeekStart {
  SUNDAY
  MONDAY
  SATURDAY
}

enum AttendenceType {
  VALIDATE
  WAITING
}

enum DanceRole {
  LEADER
  FOLLOWER
}
